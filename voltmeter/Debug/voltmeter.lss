
voltmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000085c  000008d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000085c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2b  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000889  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000624  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  000025e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052f  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000735  00000000  00000000  00002d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_21>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 49 01 	call	0x292	; 0x292 <main>
  8e:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initADC>:
#define REF_VCC 5.08
#define VOLTAGE_DIV_FACTOR 3.114

void initADC(void) {
	//ADMUX |= (0b00001111 & PORTC0);
	ADMUX |= (1 << REFS0);
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) |(1 << ADPS1) | (1 << ADPS2);
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	87 60       	ori	r24, 0x07	; 7
  a8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <setupADCSleepmode>:
}

void setupADCSleepmode(void) {
	set_sleep_mode(SLEEP_MODE_ADC);
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	81 7f       	andi	r24, 0xF1	; 241
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	83 bf       	out	0x33, r24	; 51
	ADCSRA |= (1 << ADIE);
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	80 83       	st	Z, r24
	sei();
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <__vector_21>:
}

EMPTY_INTERRUPT(ADC_vect);
  c8:	18 95       	reti

000000ca <oversample16x>:

uint16_t oversample16x(void) {
  ca:	20 e1       	ldi	r18, 0x10	; 16
	uint16_t oversampledValue = 0;
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t i;
	for(i = 0; i < 16; i++) {
		sleep_mode();
		oversampledValue += ADC;
  d0:	e8 e7       	ldi	r30, 0x78	; 120
  d2:	f0 e0       	ldi	r31, 0x00	; 0

uint16_t oversample16x(void) {
	uint16_t oversampledValue = 0;
	uint8_t i;
	for(i = 0; i < 16; i++) {
		sleep_mode();
  d4:	93 b7       	in	r25, 0x33	; 51
  d6:	91 60       	ori	r25, 0x01	; 1
  d8:	93 bf       	out	0x33, r25	; 51
  da:	88 95       	sleep
  dc:	93 b7       	in	r25, 0x33	; 51
  de:	9e 7f       	andi	r25, 0xFE	; 254
  e0:	93 bf       	out	0x33, r25	; 51
		oversampledValue += ADC;
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	48 0f       	add	r20, r24
  e8:	59 1f       	adc	r21, r25
  ea:	21 50       	subi	r18, 0x01	; 1
EMPTY_INTERRUPT(ADC_vect);

uint16_t oversample16x(void) {
	uint16_t oversampledValue = 0;
	uint8_t i;
	for(i = 0; i < 16; i++) {
  ec:	99 f7       	brne	.-26     	; 0xd4 <oversample16x+0xa>
		sleep_mode();
		oversampledValue += ADC;
	}
	return (oversampledValue >> 2);
}
  ee:	ca 01       	movw	r24, r20
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	08 95       	ret

000000fa <printFloat>:

void printFloat(float number) {
  fa:	4f 92       	push	r4
  fc:	5f 92       	push	r5
  fe:	6f 92       	push	r6
 100:	7f 92       	push	r7
 102:	8f 92       	push	r8
 104:	9f 92       	push	r9
 106:	af 92       	push	r10
 108:	bf 92       	push	r11
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <printFloat+0x1e>
 118:	00 d0       	rcall	.+0      	; 0x11a <printFloat+0x20>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	number = round(number * 100) / 100;
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	48 ec       	ldi	r20, 0xC8	; 200
 124:	52 e4       	ldi	r21, 0x42	; 66
 126:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 12a:	0e 94 08 04 	call	0x810	; 0x810 <round>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	48 ec       	ldi	r20, 0xC8	; 200
 134:	52 e4       	ldi	r21, 0x42	; 66
 136:	0e 94 14 02 	call	0x428	; 0x428 <__divsf3>
 13a:	6b 01       	movw	r12, r22
 13c:	7c 01       	movw	r14, r24
	transmitByte('0' + number / 10);
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e2       	ldi	r20, 0x20	; 32
 144:	51 e4       	ldi	r21, 0x41	; 65
 146:	0e 94 14 02 	call	0x428	; 0x428 <__divsf3>
 14a:	4b 01       	movw	r8, r22
 14c:	5c 01       	movw	r10, r24
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e4       	ldi	r20, 0x40	; 64
 154:	52 e4       	ldi	r21, 0x42	; 66
 156:	0e 94 a8 01 	call	0x350	; 0x350 <__addsf3>
 15a:	0e 94 86 02 	call	0x50c	; 0x50c <__fixunssfsi>
 15e:	86 2f       	mov	r24, r22
 160:	0e 94 89 01 	call	0x312	; 0x312 <transmitByte>
	transmitByte('0' + number - 10 * floor(number / 10));
 164:	c5 01       	movw	r24, r10
 166:	b4 01       	movw	r22, r8
 168:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <floor>
 16c:	2b 01       	movw	r4, r22
 16e:	3c 01       	movw	r6, r24
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e4       	ldi	r20, 0x40	; 64
 176:	52 e4       	ldi	r21, 0x42	; 66
 178:	c7 01       	movw	r24, r14
 17a:	b6 01       	movw	r22, r12
 17c:	0e 94 a8 01 	call	0x350	; 0x350 <__addsf3>
 180:	4b 01       	movw	r8, r22
 182:	5c 01       	movw	r10, r24
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e2       	ldi	r20, 0x20	; 32
 18a:	51 e4       	ldi	r21, 0x41	; 65
 18c:	c3 01       	movw	r24, r6
 18e:	b2 01       	movw	r22, r4
 190:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	c5 01       	movw	r24, r10
 19a:	b4 01       	movw	r22, r8
 19c:	0e 94 a7 01 	call	0x34e	; 0x34e <__subsf3>
 1a0:	0e 94 86 02 	call	0x50c	; 0x50c <__fixunssfsi>
 1a4:	86 2f       	mov	r24, r22
 1a6:	0e 94 89 01 	call	0x312	; 0x312 <transmitByte>
	transmitByte('.');
 1aa:	8e e2       	ldi	r24, 0x2E	; 46
 1ac:	0e 94 89 01 	call	0x312	; 0x312 <transmitByte>
	transmitByte('0' + (number * 10) - floor(number) * 10);
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e2       	ldi	r20, 0x20	; 32
 1b6:	51 e4       	ldi	r21, 0x41	; 65
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 1c0:	4b 01       	movw	r8, r22
 1c2:	5c 01       	movw	r10, r24
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <floor>
 1cc:	2b 01       	movw	r4, r22
 1ce:	3c 01       	movw	r6, r24
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e4       	ldi	r20, 0x40	; 64
 1d6:	52 e4       	ldi	r21, 0x42	; 66
 1d8:	c5 01       	movw	r24, r10
 1da:	b4 01       	movw	r22, r8
 1dc:	0e 94 a8 01 	call	0x350	; 0x350 <__addsf3>
 1e0:	69 83       	std	Y+1, r22	; 0x01
 1e2:	7a 83       	std	Y+2, r23	; 0x02
 1e4:	8b 83       	std	Y+3, r24	; 0x03
 1e6:	9c 83       	std	Y+4, r25	; 0x04
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e2       	ldi	r20, 0x20	; 32
 1ee:	51 e4       	ldi	r21, 0x41	; 65
 1f0:	c3 01       	movw	r24, r6
 1f2:	b2 01       	movw	r22, r4
 1f4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 1f8:	9b 01       	movw	r18, r22
 1fa:	ac 01       	movw	r20, r24
 1fc:	69 81       	ldd	r22, Y+1	; 0x01
 1fe:	7a 81       	ldd	r23, Y+2	; 0x02
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	9c 81       	ldd	r25, Y+4	; 0x04
 204:	0e 94 a7 01 	call	0x34e	; 0x34e <__subsf3>
 208:	0e 94 86 02 	call	0x50c	; 0x50c <__fixunssfsi>
 20c:	86 2f       	mov	r24, r22
 20e:	0e 94 89 01 	call	0x312	; 0x312 <transmitByte>
	transmitByte('0' + (number * 100) - floor(number * 10) * 10);
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <floor>
 21a:	4b 01       	movw	r8, r22
 21c:	5c 01       	movw	r10, r24
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	48 ec       	ldi	r20, 0xC8	; 200
 224:	52 e4       	ldi	r21, 0x42	; 66
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	40 e4       	ldi	r20, 0x40	; 64
 234:	52 e4       	ldi	r21, 0x42	; 66
 236:	0e 94 a8 01 	call	0x350	; 0x350 <__addsf3>
 23a:	6b 01       	movw	r12, r22
 23c:	7c 01       	movw	r14, r24
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e2       	ldi	r20, 0x20	; 32
 244:	51 e4       	ldi	r21, 0x41	; 65
 246:	c5 01       	movw	r24, r10
 248:	b4 01       	movw	r22, r8
 24a:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	0e 94 a7 01 	call	0x34e	; 0x34e <__subsf3>
 25a:	0e 94 86 02 	call	0x50c	; 0x50c <__fixunssfsi>
 25e:	86 2f       	mov	r24, r22
 260:	0e 94 89 01 	call	0x312	; 0x312 <transmitByte>
	printString("\r\n");
 264:	85 e1       	ldi	r24, 0x15	; 21
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 91 01 	call	0x322	; 0x322 <printString>
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	8f 90       	pop	r8
 288:	7f 90       	pop	r7
 28a:	6f 90       	pop	r6
 28c:	5f 90       	pop	r5
 28e:	4f 90       	pop	r4
 290:	08 95       	ret

00000292 <main>:
int main(void)
{
	float voltage;
    initUSART();
 292:	0e 94 78 01 	call	0x2f0	; 0x2f0 <initUSART>
	printString("\r\nDigital Voltmeter\r\n\r\n");
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 91 01 	call	0x322	; 0x322 <printString>
	initADC();
 29e:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	setupADCSleepmode();
 2a2:	0e 94 59 00 	call	0xb2	; 0xb2 <setupADCSleepmode>
    while (1) 
    {
		voltage = oversample16x() * VOLTAGE_DIV_FACTOR * REF_VCC / 4096;
 2a6:	0e 94 65 00 	call	0xca	; 0xca <oversample16x>
		printFloat(voltage);
 2aa:	bc 01       	movw	r22, r24
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 b5 02 	call	0x56a	; 0x56a <__floatunsisf>
 2b4:	27 ec       	ldi	r18, 0xC7	; 199
 2b6:	3b e4       	ldi	r19, 0x4B	; 75
 2b8:	47 e4       	ldi	r20, 0x47	; 71
 2ba:	50 e4       	ldi	r21, 0x40	; 64
 2bc:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 2c0:	2c e5       	ldi	r18, 0x5C	; 92
 2c2:	3f e8       	ldi	r19, 0x8F	; 143
 2c4:	42 ea       	ldi	r20, 0xA2	; 162
 2c6:	50 e4       	ldi	r21, 0x40	; 64
 2c8:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	40 e8       	ldi	r20, 0x80	; 128
 2d2:	59 e3       	ldi	r21, 0x39	; 57
 2d4:	0e 94 9b 03 	call	0x736	; 0x736 <__mulsf3>
 2d8:	0e 94 7d 00 	call	0xfa	; 0xfa <printFloat>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	89 e6       	ldi	r24, 0x69	; 105
 2e0:	98 e1       	ldi	r25, 0x18	; 24
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x50>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x5a>
 2ec:	00 00       	nop
 2ee:	db cf       	rjmp	.-74     	; 0x2a6 <main+0x14>

000002f0 <initUSART>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
  return UDR0;                                /* return register value */
}
 2f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2f4:	87 e6       	ldi	r24, 0x67	; 103
 2f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2fa:	e0 ec       	ldi	r30, 0xC0	; 192
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	80 83       	st	Z, r24
 304:	88 e1       	ldi	r24, 0x18	; 24
 306:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 310:	08 95       	ret

00000312 <transmitByte>:
 312:	e0 ec       	ldi	r30, 0xC0	; 192
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	90 81       	ld	r25, Z
 318:	95 ff       	sbrs	r25, 5
 31a:	fd cf       	rjmp	.-6      	; 0x316 <transmitByte+0x4>
 31c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 320:	08 95       	ret

00000322 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 32a:	80 81       	ld	r24, Z
 32c:	88 23       	and	r24, r24
 32e:	59 f0       	breq	.+22     	; 0x346 <printString+0x24>
 330:	8f 01       	movw	r16, r30
 332:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 334:	0e 94 89 01 	call	0x312	; 0x312 <transmitByte>
    i++;
 338:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 33a:	f8 01       	movw	r30, r16
 33c:	ec 0f       	add	r30, r28
 33e:	f1 1d       	adc	r31, r1
 340:	80 81       	ld	r24, Z
 342:	81 11       	cpse	r24, r1
 344:	f7 cf       	rjmp	.-18     	; 0x334 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <__subsf3>:
 34e:	50 58       	subi	r21, 0x80	; 128

00000350 <__addsf3>:
 350:	bb 27       	eor	r27, r27
 352:	aa 27       	eor	r26, r26
 354:	0e 94 bf 01 	call	0x37e	; 0x37e <__addsf3x>
 358:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_round>
 35c:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_pscA>
 360:	38 f0       	brcs	.+14     	; 0x370 <__addsf3+0x20>
 362:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscB>
 366:	20 f0       	brcs	.+8      	; 0x370 <__addsf3+0x20>
 368:	39 f4       	brne	.+14     	; 0x378 <__addsf3+0x28>
 36a:	9f 3f       	cpi	r25, 0xFF	; 255
 36c:	19 f4       	brne	.+6      	; 0x374 <__addsf3+0x24>
 36e:	26 f4       	brtc	.+8      	; 0x378 <__addsf3+0x28>
 370:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_nan>
 374:	0e f4       	brtc	.+2      	; 0x378 <__addsf3+0x28>
 376:	e0 95       	com	r30
 378:	e7 fb       	bst	r30, 7
 37a:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>

0000037e <__addsf3x>:
 37e:	e9 2f       	mov	r30, r25
 380:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_split3>
 384:	58 f3       	brcs	.-42     	; 0x35c <__addsf3+0xc>
 386:	ba 17       	cp	r27, r26
 388:	62 07       	cpc	r22, r18
 38a:	73 07       	cpc	r23, r19
 38c:	84 07       	cpc	r24, r20
 38e:	95 07       	cpc	r25, r21
 390:	20 f0       	brcs	.+8      	; 0x39a <__addsf3x+0x1c>
 392:	79 f4       	brne	.+30     	; 0x3b2 <__addsf3x+0x34>
 394:	a6 f5       	brtc	.+104    	; 0x3fe <__addsf3x+0x80>
 396:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_zero>
 39a:	0e f4       	brtc	.+2      	; 0x39e <__addsf3x+0x20>
 39c:	e0 95       	com	r30
 39e:	0b 2e       	mov	r0, r27
 3a0:	ba 2f       	mov	r27, r26
 3a2:	a0 2d       	mov	r26, r0
 3a4:	0b 01       	movw	r0, r22
 3a6:	b9 01       	movw	r22, r18
 3a8:	90 01       	movw	r18, r0
 3aa:	0c 01       	movw	r0, r24
 3ac:	ca 01       	movw	r24, r20
 3ae:	a0 01       	movw	r20, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	ff 27       	eor	r31, r31
 3b4:	59 1b       	sub	r21, r25
 3b6:	99 f0       	breq	.+38     	; 0x3de <__addsf3x+0x60>
 3b8:	59 3f       	cpi	r21, 0xF9	; 249
 3ba:	50 f4       	brcc	.+20     	; 0x3d0 <__addsf3x+0x52>
 3bc:	50 3e       	cpi	r21, 0xE0	; 224
 3be:	68 f1       	brcs	.+90     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3c0:	1a 16       	cp	r1, r26
 3c2:	f0 40       	sbci	r31, 0x00	; 0
 3c4:	a2 2f       	mov	r26, r18
 3c6:	23 2f       	mov	r18, r19
 3c8:	34 2f       	mov	r19, r20
 3ca:	44 27       	eor	r20, r20
 3cc:	58 5f       	subi	r21, 0xF8	; 248
 3ce:	f3 cf       	rjmp	.-26     	; 0x3b6 <__addsf3x+0x38>
 3d0:	46 95       	lsr	r20
 3d2:	37 95       	ror	r19
 3d4:	27 95       	ror	r18
 3d6:	a7 95       	ror	r26
 3d8:	f0 40       	sbci	r31, 0x00	; 0
 3da:	53 95       	inc	r21
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <__addsf3x+0x52>
 3de:	7e f4       	brtc	.+30     	; 0x3fe <__addsf3x+0x80>
 3e0:	1f 16       	cp	r1, r31
 3e2:	ba 0b       	sbc	r27, r26
 3e4:	62 0b       	sbc	r22, r18
 3e6:	73 0b       	sbc	r23, r19
 3e8:	84 0b       	sbc	r24, r20
 3ea:	ba f0       	brmi	.+46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	a1 f0       	breq	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3f0:	ff 0f       	add	r31, r31
 3f2:	bb 1f       	adc	r27, r27
 3f4:	66 1f       	adc	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	c2 f7       	brpl	.-16     	; 0x3ec <__addsf3x+0x6e>
 3fc:	0e c0       	rjmp	.+28     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fe:	ba 0f       	add	r27, r26
 400:	62 1f       	adc	r22, r18
 402:	73 1f       	adc	r23, r19
 404:	84 1f       	adc	r24, r20
 406:	48 f4       	brcc	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 408:	87 95       	ror	r24
 40a:	77 95       	ror	r23
 40c:	67 95       	ror	r22
 40e:	b7 95       	ror	r27
 410:	f7 95       	ror	r31
 412:	9e 3f       	cpi	r25, 0xFE	; 254
 414:	08 f0       	brcs	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	b0 cf       	rjmp	.-160    	; 0x378 <__addsf3+0x28>
 418:	93 95       	inc	r25
 41a:	88 0f       	add	r24, r24
 41c:	08 f0       	brcs	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	99 27       	eor	r25, r25
 420:	ee 0f       	add	r30, r30
 422:	97 95       	ror	r25
 424:	87 95       	ror	r24
 426:	08 95       	ret

00000428 <__divsf3>:
 428:	0e 94 28 02 	call	0x450	; 0x450 <__divsf3x>
 42c:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_round>
 430:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscB>
 434:	58 f0       	brcs	.+22     	; 0x44c <__divsf3+0x24>
 436:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_pscA>
 43a:	40 f0       	brcs	.+16     	; 0x44c <__divsf3+0x24>
 43c:	29 f4       	brne	.+10     	; 0x448 <__divsf3+0x20>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	29 f0       	breq	.+10     	; 0x44c <__divsf3+0x24>
 442:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 446:	51 11       	cpse	r21, r1
 448:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 44c:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_nan>

00000450 <__divsf3x>:
 450:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_split3>
 454:	68 f3       	brcs	.-38     	; 0x430 <__divsf3+0x8>

00000456 <__divsf3_pse>:
 456:	99 23       	and	r25, r25
 458:	b1 f3       	breq	.-20     	; 0x446 <__divsf3+0x1e>
 45a:	55 23       	and	r21, r21
 45c:	91 f3       	breq	.-28     	; 0x442 <__divsf3+0x1a>
 45e:	95 1b       	sub	r25, r21
 460:	55 0b       	sbc	r21, r21
 462:	bb 27       	eor	r27, r27
 464:	aa 27       	eor	r26, r26
 466:	62 17       	cp	r22, r18
 468:	73 07       	cpc	r23, r19
 46a:	84 07       	cpc	r24, r20
 46c:	38 f0       	brcs	.+14     	; 0x47c <__divsf3_pse+0x26>
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	5f 4f       	sbci	r21, 0xFF	; 255
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	44 1f       	adc	r20, r20
 478:	aa 1f       	adc	r26, r26
 47a:	a9 f3       	breq	.-22     	; 0x466 <__divsf3_pse+0x10>
 47c:	35 d0       	rcall	.+106    	; 0x4e8 <__divsf3_pse+0x92>
 47e:	0e 2e       	mov	r0, r30
 480:	3a f0       	brmi	.+14     	; 0x490 <__divsf3_pse+0x3a>
 482:	e0 e8       	ldi	r30, 0x80	; 128
 484:	32 d0       	rcall	.+100    	; 0x4ea <__divsf3_pse+0x94>
 486:	91 50       	subi	r25, 0x01	; 1
 488:	50 40       	sbci	r21, 0x00	; 0
 48a:	e6 95       	lsr	r30
 48c:	00 1c       	adc	r0, r0
 48e:	ca f7       	brpl	.-14     	; 0x482 <__divsf3_pse+0x2c>
 490:	2b d0       	rcall	.+86     	; 0x4e8 <__divsf3_pse+0x92>
 492:	fe 2f       	mov	r31, r30
 494:	29 d0       	rcall	.+82     	; 0x4e8 <__divsf3_pse+0x92>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	88 1f       	adc	r24, r24
 49c:	bb 1f       	adc	r27, r27
 49e:	26 17       	cp	r18, r22
 4a0:	37 07       	cpc	r19, r23
 4a2:	48 07       	cpc	r20, r24
 4a4:	ab 07       	cpc	r26, r27
 4a6:	b0 e8       	ldi	r27, 0x80	; 128
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__divsf3_pse+0x56>
 4aa:	bb 0b       	sbc	r27, r27
 4ac:	80 2d       	mov	r24, r0
 4ae:	bf 01       	movw	r22, r30
 4b0:	ff 27       	eor	r31, r31
 4b2:	93 58       	subi	r25, 0x83	; 131
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	3a f0       	brmi	.+14     	; 0x4c6 <__divsf3_pse+0x70>
 4b8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ba:	51 05       	cpc	r21, r1
 4bc:	78 f0       	brcs	.+30     	; 0x4dc <__divsf3_pse+0x86>
 4be:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 4c2:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 4c6:	5f 3f       	cpi	r21, 0xFF	; 255
 4c8:	e4 f3       	brlt	.-8      	; 0x4c2 <__divsf3_pse+0x6c>
 4ca:	98 3e       	cpi	r25, 0xE8	; 232
 4cc:	d4 f3       	brlt	.-12     	; 0x4c2 <__divsf3_pse+0x6c>
 4ce:	86 95       	lsr	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f7 95       	ror	r31
 4d8:	9f 5f       	subi	r25, 0xFF	; 255
 4da:	c9 f7       	brne	.-14     	; 0x4ce <__divsf3_pse+0x78>
 4dc:	88 0f       	add	r24, r24
 4de:	91 1d       	adc	r25, r1
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret
 4e8:	e1 e0       	ldi	r30, 0x01	; 1
 4ea:	66 0f       	add	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	bb 1f       	adc	r27, r27
 4f2:	62 17       	cp	r22, r18
 4f4:	73 07       	cpc	r23, r19
 4f6:	84 07       	cpc	r24, r20
 4f8:	ba 07       	cpc	r27, r26
 4fa:	20 f0       	brcs	.+8      	; 0x504 <__divsf3_pse+0xae>
 4fc:	62 1b       	sub	r22, r18
 4fe:	73 0b       	sbc	r23, r19
 500:	84 0b       	sbc	r24, r20
 502:	ba 0b       	sbc	r27, r26
 504:	ee 1f       	adc	r30, r30
 506:	88 f7       	brcc	.-30     	; 0x4ea <__divsf3_pse+0x94>
 508:	e0 95       	com	r30
 50a:	08 95       	ret

0000050c <__fixunssfsi>:
 50c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_splitA>
 510:	88 f0       	brcs	.+34     	; 0x534 <__fixunssfsi+0x28>
 512:	9f 57       	subi	r25, 0x7F	; 127
 514:	98 f0       	brcs	.+38     	; 0x53c <__fixunssfsi+0x30>
 516:	b9 2f       	mov	r27, r25
 518:	99 27       	eor	r25, r25
 51a:	b7 51       	subi	r27, 0x17	; 23
 51c:	b0 f0       	brcs	.+44     	; 0x54a <__fixunssfsi+0x3e>
 51e:	e1 f0       	breq	.+56     	; 0x558 <__fixunssfsi+0x4c>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	1a f0       	brmi	.+6      	; 0x530 <__fixunssfsi+0x24>
 52a:	ba 95       	dec	r27
 52c:	c9 f7       	brne	.-14     	; 0x520 <__fixunssfsi+0x14>
 52e:	14 c0       	rjmp	.+40     	; 0x558 <__fixunssfsi+0x4c>
 530:	b1 30       	cpi	r27, 0x01	; 1
 532:	91 f0       	breq	.+36     	; 0x558 <__fixunssfsi+0x4c>
 534:	0e 94 94 03 	call	0x728	; 0x728 <__fp_zero>
 538:	b1 e0       	ldi	r27, 0x01	; 1
 53a:	08 95       	ret
 53c:	0c 94 94 03 	jmp	0x728	; 0x728 <__fp_zero>
 540:	67 2f       	mov	r22, r23
 542:	78 2f       	mov	r23, r24
 544:	88 27       	eor	r24, r24
 546:	b8 5f       	subi	r27, 0xF8	; 248
 548:	39 f0       	breq	.+14     	; 0x558 <__fixunssfsi+0x4c>
 54a:	b9 3f       	cpi	r27, 0xF9	; 249
 54c:	cc f3       	brlt	.-14     	; 0x540 <__fixunssfsi+0x34>
 54e:	86 95       	lsr	r24
 550:	77 95       	ror	r23
 552:	67 95       	ror	r22
 554:	b3 95       	inc	r27
 556:	d9 f7       	brne	.-10     	; 0x54e <__fixunssfsi+0x42>
 558:	3e f4       	brtc	.+14     	; 0x568 <__fixunssfsi+0x5c>
 55a:	90 95       	com	r25
 55c:	80 95       	com	r24
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	08 95       	ret

0000056a <__floatunsisf>:
 56a:	e8 94       	clt
 56c:	09 c0       	rjmp	.+18     	; 0x580 <__floatsisf+0x12>

0000056e <__floatsisf>:
 56e:	97 fb       	bst	r25, 7
 570:	3e f4       	brtc	.+14     	; 0x580 <__floatsisf+0x12>
 572:	90 95       	com	r25
 574:	80 95       	com	r24
 576:	70 95       	com	r23
 578:	61 95       	neg	r22
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	99 23       	and	r25, r25
 582:	a9 f0       	breq	.+42     	; 0x5ae <__floatsisf+0x40>
 584:	f9 2f       	mov	r31, r25
 586:	96 e9       	ldi	r25, 0x96	; 150
 588:	bb 27       	eor	r27, r27
 58a:	93 95       	inc	r25
 58c:	f6 95       	lsr	r31
 58e:	87 95       	ror	r24
 590:	77 95       	ror	r23
 592:	67 95       	ror	r22
 594:	b7 95       	ror	r27
 596:	f1 11       	cpse	r31, r1
 598:	f8 cf       	rjmp	.-16     	; 0x58a <__floatsisf+0x1c>
 59a:	fa f4       	brpl	.+62     	; 0x5da <__floatsisf+0x6c>
 59c:	bb 0f       	add	r27, r27
 59e:	11 f4       	brne	.+4      	; 0x5a4 <__floatsisf+0x36>
 5a0:	60 ff       	sbrs	r22, 0
 5a2:	1b c0       	rjmp	.+54     	; 0x5da <__floatsisf+0x6c>
 5a4:	6f 5f       	subi	r22, 0xFF	; 255
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	16 c0       	rjmp	.+44     	; 0x5da <__floatsisf+0x6c>
 5ae:	88 23       	and	r24, r24
 5b0:	11 f0       	breq	.+4      	; 0x5b6 <__floatsisf+0x48>
 5b2:	96 e9       	ldi	r25, 0x96	; 150
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <__floatsisf+0x6a>
 5b6:	77 23       	and	r23, r23
 5b8:	21 f0       	breq	.+8      	; 0x5c2 <__floatsisf+0x54>
 5ba:	9e e8       	ldi	r25, 0x8E	; 142
 5bc:	87 2f       	mov	r24, r23
 5be:	76 2f       	mov	r23, r22
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <__floatsisf+0x5e>
 5c2:	66 23       	and	r22, r22
 5c4:	71 f0       	breq	.+28     	; 0x5e2 <__floatsisf+0x74>
 5c6:	96 e8       	ldi	r25, 0x86	; 134
 5c8:	86 2f       	mov	r24, r22
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	2a f0       	brmi	.+10     	; 0x5da <__floatsisf+0x6c>
 5d0:	9a 95       	dec	r25
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	da f7       	brpl	.-10     	; 0x5d0 <__floatsisf+0x62>
 5da:	88 0f       	add	r24, r24
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	97 f9       	bld	r25, 7
 5e2:	08 95       	ret

000005e4 <floor>:
 5e4:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__fp_trunc>
 5e8:	90 f0       	brcs	.+36     	; 0x60e <floor+0x2a>
 5ea:	9f 37       	cpi	r25, 0x7F	; 127
 5ec:	48 f4       	brcc	.+18     	; 0x600 <floor+0x1c>
 5ee:	91 11       	cpse	r25, r1
 5f0:	16 f0       	brts	.+4      	; 0x5f6 <floor+0x12>
 5f2:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	9f eb       	ldi	r25, 0xBF	; 191
 5fe:	08 95       	ret
 600:	26 f4       	brtc	.+8      	; 0x60a <floor+0x26>
 602:	1b 16       	cp	r1, r27
 604:	61 1d       	adc	r22, r1
 606:	71 1d       	adc	r23, r1
 608:	81 1d       	adc	r24, r1
 60a:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_mintl>
 60e:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_mpack>

00000612 <__fp_inf>:
 612:	97 f9       	bld	r25, 7
 614:	9f 67       	ori	r25, 0x7F	; 127
 616:	80 e8       	ldi	r24, 0x80	; 128
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	08 95       	ret

0000061e <__fp_mintl>:
 61e:	88 23       	and	r24, r24
 620:	71 f4       	brne	.+28     	; 0x63e <__fp_mintl+0x20>
 622:	77 23       	and	r23, r23
 624:	21 f0       	breq	.+8      	; 0x62e <__fp_mintl+0x10>
 626:	98 50       	subi	r25, 0x08	; 8
 628:	87 2b       	or	r24, r23
 62a:	76 2f       	mov	r23, r22
 62c:	07 c0       	rjmp	.+14     	; 0x63c <__fp_mintl+0x1e>
 62e:	66 23       	and	r22, r22
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_mintl+0x18>
 632:	99 27       	eor	r25, r25
 634:	0d c0       	rjmp	.+26     	; 0x650 <__fp_mintl+0x32>
 636:	90 51       	subi	r25, 0x10	; 16
 638:	86 2b       	or	r24, r22
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	2a f0       	brmi	.+10     	; 0x64a <__fp_mintl+0x2c>
 640:	9a 95       	dec	r25
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	da f7       	brpl	.-10     	; 0x640 <__fp_mintl+0x22>
 64a:	88 0f       	add	r24, r24
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__fp_mpack>:
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	31 f0       	breq	.+12     	; 0x664 <__fp_mpack_finite+0xc>

00000658 <__fp_mpack_finite>:
 658:	91 50       	subi	r25, 0x01	; 1
 65a:	20 f4       	brcc	.+8      	; 0x664 <__fp_mpack_finite+0xc>
 65c:	87 95       	ror	r24
 65e:	77 95       	ror	r23
 660:	67 95       	ror	r22
 662:	b7 95       	ror	r27
 664:	88 0f       	add	r24, r24
 666:	91 1d       	adc	r25, r1
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret

00000670 <__fp_nan>:
 670:	9f ef       	ldi	r25, 0xFF	; 255
 672:	80 ec       	ldi	r24, 0xC0	; 192
 674:	08 95       	ret

00000676 <__fp_pscA>:
 676:	00 24       	eor	r0, r0
 678:	0a 94       	dec	r0
 67a:	16 16       	cp	r1, r22
 67c:	17 06       	cpc	r1, r23
 67e:	18 06       	cpc	r1, r24
 680:	09 06       	cpc	r0, r25
 682:	08 95       	ret

00000684 <__fp_pscB>:
 684:	00 24       	eor	r0, r0
 686:	0a 94       	dec	r0
 688:	12 16       	cp	r1, r18
 68a:	13 06       	cpc	r1, r19
 68c:	14 06       	cpc	r1, r20
 68e:	05 06       	cpc	r0, r21
 690:	08 95       	ret

00000692 <__fp_round>:
 692:	09 2e       	mov	r0, r25
 694:	03 94       	inc	r0
 696:	00 0c       	add	r0, r0
 698:	11 f4       	brne	.+4      	; 0x69e <__fp_round+0xc>
 69a:	88 23       	and	r24, r24
 69c:	52 f0       	brmi	.+20     	; 0x6b2 <__fp_round+0x20>
 69e:	bb 0f       	add	r27, r27
 6a0:	40 f4       	brcc	.+16     	; 0x6b2 <__fp_round+0x20>
 6a2:	bf 2b       	or	r27, r31
 6a4:	11 f4       	brne	.+4      	; 0x6aa <__fp_round+0x18>
 6a6:	60 ff       	sbrs	r22, 0
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <__fp_round+0x20>
 6aa:	6f 5f       	subi	r22, 0xFF	; 255
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	08 95       	ret

000006b4 <__fp_split3>:
 6b4:	57 fd       	sbrc	r21, 7
 6b6:	90 58       	subi	r25, 0x80	; 128
 6b8:	44 0f       	add	r20, r20
 6ba:	55 1f       	adc	r21, r21
 6bc:	59 f0       	breq	.+22     	; 0x6d4 <__fp_splitA+0x10>
 6be:	5f 3f       	cpi	r21, 0xFF	; 255
 6c0:	71 f0       	breq	.+28     	; 0x6de <__fp_splitA+0x1a>
 6c2:	47 95       	ror	r20

000006c4 <__fp_splitA>:
 6c4:	88 0f       	add	r24, r24
 6c6:	97 fb       	bst	r25, 7
 6c8:	99 1f       	adc	r25, r25
 6ca:	61 f0       	breq	.+24     	; 0x6e4 <__fp_splitA+0x20>
 6cc:	9f 3f       	cpi	r25, 0xFF	; 255
 6ce:	79 f0       	breq	.+30     	; 0x6ee <__fp_splitA+0x2a>
 6d0:	87 95       	ror	r24
 6d2:	08 95       	ret
 6d4:	12 16       	cp	r1, r18
 6d6:	13 06       	cpc	r1, r19
 6d8:	14 06       	cpc	r1, r20
 6da:	55 1f       	adc	r21, r21
 6dc:	f2 cf       	rjmp	.-28     	; 0x6c2 <__fp_split3+0xe>
 6de:	46 95       	lsr	r20
 6e0:	f1 df       	rcall	.-30     	; 0x6c4 <__fp_splitA>
 6e2:	08 c0       	rjmp	.+16     	; 0x6f4 <__fp_splitA+0x30>
 6e4:	16 16       	cp	r1, r22
 6e6:	17 06       	cpc	r1, r23
 6e8:	18 06       	cpc	r1, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	f1 cf       	rjmp	.-30     	; 0x6d0 <__fp_splitA+0xc>
 6ee:	86 95       	lsr	r24
 6f0:	71 05       	cpc	r23, r1
 6f2:	61 05       	cpc	r22, r1
 6f4:	08 94       	sec
 6f6:	08 95       	ret

000006f8 <__fp_trunc>:
 6f8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_splitA>
 6fc:	a0 f0       	brcs	.+40     	; 0x726 <__fp_trunc+0x2e>
 6fe:	be e7       	ldi	r27, 0x7E	; 126
 700:	b9 17       	cp	r27, r25
 702:	88 f4       	brcc	.+34     	; 0x726 <__fp_trunc+0x2e>
 704:	bb 27       	eor	r27, r27
 706:	9f 38       	cpi	r25, 0x8F	; 143
 708:	60 f4       	brcc	.+24     	; 0x722 <__fp_trunc+0x2a>
 70a:	16 16       	cp	r1, r22
 70c:	b1 1d       	adc	r27, r1
 70e:	67 2f       	mov	r22, r23
 710:	78 2f       	mov	r23, r24
 712:	88 27       	eor	r24, r24
 714:	98 5f       	subi	r25, 0xF8	; 248
 716:	f7 cf       	rjmp	.-18     	; 0x706 <__fp_trunc+0xe>
 718:	86 95       	lsr	r24
 71a:	77 95       	ror	r23
 71c:	67 95       	ror	r22
 71e:	b1 1d       	adc	r27, r1
 720:	93 95       	inc	r25
 722:	96 39       	cpi	r25, 0x96	; 150
 724:	c8 f3       	brcs	.-14     	; 0x718 <__fp_trunc+0x20>
 726:	08 95       	ret

00000728 <__fp_zero>:
 728:	e8 94       	clt

0000072a <__fp_szero>:
 72a:	bb 27       	eor	r27, r27
 72c:	66 27       	eor	r22, r22
 72e:	77 27       	eor	r23, r23
 730:	cb 01       	movw	r24, r22
 732:	97 f9       	bld	r25, 7
 734:	08 95       	ret

00000736 <__mulsf3>:
 736:	0e 94 ae 03 	call	0x75c	; 0x75c <__mulsf3x>
 73a:	0c 94 49 03 	jmp	0x692	; 0x692 <__fp_round>
 73e:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_pscA>
 742:	38 f0       	brcs	.+14     	; 0x752 <__mulsf3+0x1c>
 744:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscB>
 748:	20 f0       	brcs	.+8      	; 0x752 <__mulsf3+0x1c>
 74a:	95 23       	and	r25, r21
 74c:	11 f0       	breq	.+4      	; 0x752 <__mulsf3+0x1c>
 74e:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 752:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_nan>
 756:	11 24       	eor	r1, r1
 758:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>

0000075c <__mulsf3x>:
 75c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fp_split3>
 760:	70 f3       	brcs	.-36     	; 0x73e <__mulsf3+0x8>

00000762 <__mulsf3_pse>:
 762:	95 9f       	mul	r25, r21
 764:	c1 f3       	breq	.-16     	; 0x756 <__mulsf3+0x20>
 766:	95 0f       	add	r25, r21
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	55 1f       	adc	r21, r21
 76c:	62 9f       	mul	r22, r18
 76e:	f0 01       	movw	r30, r0
 770:	72 9f       	mul	r23, r18
 772:	bb 27       	eor	r27, r27
 774:	f0 0d       	add	r31, r0
 776:	b1 1d       	adc	r27, r1
 778:	63 9f       	mul	r22, r19
 77a:	aa 27       	eor	r26, r26
 77c:	f0 0d       	add	r31, r0
 77e:	b1 1d       	adc	r27, r1
 780:	aa 1f       	adc	r26, r26
 782:	64 9f       	mul	r22, r20
 784:	66 27       	eor	r22, r22
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	66 1f       	adc	r22, r22
 78c:	82 9f       	mul	r24, r18
 78e:	22 27       	eor	r18, r18
 790:	b0 0d       	add	r27, r0
 792:	a1 1d       	adc	r26, r1
 794:	62 1f       	adc	r22, r18
 796:	73 9f       	mul	r23, r19
 798:	b0 0d       	add	r27, r0
 79a:	a1 1d       	adc	r26, r1
 79c:	62 1f       	adc	r22, r18
 79e:	83 9f       	mul	r24, r19
 7a0:	a0 0d       	add	r26, r0
 7a2:	61 1d       	adc	r22, r1
 7a4:	22 1f       	adc	r18, r18
 7a6:	74 9f       	mul	r23, r20
 7a8:	33 27       	eor	r19, r19
 7aa:	a0 0d       	add	r26, r0
 7ac:	61 1d       	adc	r22, r1
 7ae:	23 1f       	adc	r18, r19
 7b0:	84 9f       	mul	r24, r20
 7b2:	60 0d       	add	r22, r0
 7b4:	21 1d       	adc	r18, r1
 7b6:	82 2f       	mov	r24, r18
 7b8:	76 2f       	mov	r23, r22
 7ba:	6a 2f       	mov	r22, r26
 7bc:	11 24       	eor	r1, r1
 7be:	9f 57       	subi	r25, 0x7F	; 127
 7c0:	50 40       	sbci	r21, 0x00	; 0
 7c2:	9a f0       	brmi	.+38     	; 0x7ea <__mulsf3_pse+0x88>
 7c4:	f1 f0       	breq	.+60     	; 0x802 <__mulsf3_pse+0xa0>
 7c6:	88 23       	and	r24, r24
 7c8:	4a f0       	brmi	.+18     	; 0x7dc <__mulsf3_pse+0x7a>
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	bb 1f       	adc	r27, r27
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	91 50       	subi	r25, 0x01	; 1
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	a9 f7       	brne	.-22     	; 0x7c6 <__mulsf3_pse+0x64>
 7dc:	9e 3f       	cpi	r25, 0xFE	; 254
 7de:	51 05       	cpc	r21, r1
 7e0:	80 f0       	brcs	.+32     	; 0x802 <__mulsf3_pse+0xa0>
 7e2:	0c 94 09 03 	jmp	0x612	; 0x612 <__fp_inf>
 7e6:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>
 7ea:	5f 3f       	cpi	r21, 0xFF	; 255
 7ec:	e4 f3       	brlt	.-8      	; 0x7e6 <__mulsf3_pse+0x84>
 7ee:	98 3e       	cpi	r25, 0xE8	; 232
 7f0:	d4 f3       	brlt	.-12     	; 0x7e6 <__mulsf3_pse+0x84>
 7f2:	86 95       	lsr	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b7 95       	ror	r27
 7fa:	f7 95       	ror	r31
 7fc:	e7 95       	ror	r30
 7fe:	9f 5f       	subi	r25, 0xFF	; 255
 800:	c1 f7       	brne	.-16     	; 0x7f2 <__mulsf3_pse+0x90>
 802:	fe 2b       	or	r31, r30
 804:	88 0f       	add	r24, r24
 806:	91 1d       	adc	r25, r1
 808:	96 95       	lsr	r25
 80a:	87 95       	ror	r24
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <round>:
 810:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_splitA>
 814:	e8 f0       	brcs	.+58     	; 0x850 <round+0x40>
 816:	9e 37       	cpi	r25, 0x7E	; 126
 818:	e8 f0       	brcs	.+58     	; 0x854 <round+0x44>
 81a:	96 39       	cpi	r25, 0x96	; 150
 81c:	b8 f4       	brcc	.+46     	; 0x84c <round+0x3c>
 81e:	9e 38       	cpi	r25, 0x8E	; 142
 820:	48 f4       	brcc	.+18     	; 0x834 <round+0x24>
 822:	67 2f       	mov	r22, r23
 824:	78 2f       	mov	r23, r24
 826:	88 27       	eor	r24, r24
 828:	98 5f       	subi	r25, 0xF8	; 248
 82a:	f9 cf       	rjmp	.-14     	; 0x81e <round+0xe>
 82c:	86 95       	lsr	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	93 95       	inc	r25
 834:	95 39       	cpi	r25, 0x95	; 149
 836:	d0 f3       	brcs	.-12     	; 0x82c <round+0x1c>
 838:	b6 2f       	mov	r27, r22
 83a:	b1 70       	andi	r27, 0x01	; 1
 83c:	6b 0f       	add	r22, r27
 83e:	71 1d       	adc	r23, r1
 840:	81 1d       	adc	r24, r1
 842:	20 f4       	brcc	.+8      	; 0x84c <round+0x3c>
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	93 95       	inc	r25
 84c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_mintl>
 850:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_mpack>
 854:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_szero>

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
